#!/usr/bin/env python3

import json
import os
import sys
import termios
import tty


#
# State manipulation tools
#

#
# The format of the state could be the following
#
# NOTE: Probably don't need to validate that each
#       event has same user ID's as the main
#       script will take care of ensuring sanity.
#
# book = {
#     "event0" {
#         "user0": {
#             "payment": 42,
#             "share": 0.3
#         },
#         "user1": {
#             "payment": 666,
#             "share": 0.7
#         }
#     }
# }
#


def append_bill(state):
    """Append new event to state

    """
    return dict()  # new state


def calculate_balance(state):
    """Calculate total balance from all events

    """
    return dict()


def calculate_flow(state):
    """Calculate suggested money flow

    """
    return dict()


#
# Command line tools
#


def clear():
    os.system("clear")


def _getch():
    """Get character and auto enter

    """
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


def getch():
    """Get character, clear, and return

    """
    ch = _getch()
    clear()
    return ch


# TODO: Flashing message to project_prompt (e.g. unknown key)
# TODO: Project summary to project_prompt
# TODO: All prompt views to same height


def _quit():
    clear()
    print(
        """

        Thanks for using Concourse!

        """
    )
    quit()


def export_results(state):
    return project_prompt(state)


def print_results(state):
    return project_prompt(state)


def unknown(state):
    """Handle unknown selection

    """
    return project_prompt(state)


def save(state):
    return project_prompt(state)


def new_project(state):
    return project_prompt(state)


def load(state):
    return project_prompt(state)


def add_bill(state):
    return project_prompt(state)


def display_balance(state):
    return project_prompt(state)


def project_prompt(state):

    def act(ch, state):
        return (
            add_bill(state) if ch == "a" else
            display_balance(state) if ch == "b" else
            export_results(state) if ch == "e" else
            print_results(state) if ch == "p" else
            _quit() if ch == "q" else
            save(state) if ch == "s" else
            unknown(state)
        )

    print(
        """
        Your options consist of

        <a> Add bill
        <b> Display current balance
        <e> Export results
        <p> Print results
        <q> Quit
        <s> Save

        """
    )
    return act(getch(), state)


def main_prompt():

    def act(ch, state):
        return (
            new_project(state) if ch == "n" else
            load(state) if ch == "l" else
            _quit() if ch == "q" else
            unknown(state)
        )

    clear()
    print(
        """
           _______________________________________________________
          --------------------------------------------------------
         / Concourse -- A dead simple utility for sharing costs /
        --------------------------------------------------------

        Please select what to do:

        <n> Start a new project
        <l> Load an existing project
        <q> Quit

        """
    )
    return act(getch(), {})


if __name__ == "__main__":

    main_prompt()
