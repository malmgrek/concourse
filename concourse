#!/usr/bin/env python3

import json
import os
import sys
import termios
import tty


def update_dict(x, y):
    return {**x, **y}


#
# State manipulation tools
#


class State:
    """Program state

    """

    def __init__(self, name, workspace, users, bills):
        self.name = name
        self.workspace = workspace
        self.users = users
        self.bills = bills
        self.filepath = os.path.join(
            workspace, name + ".json"
        )

    def save(self):
        with open(self.filepath, "w+") as f:
            json.dump(self.__dict__, f)
        return

    @classmethod
    def load(cls, filepath):
        with open(filepath, "r") as f:
            raw = json.load(f)
        return cls(
            name=raw["name"],
            workspace=raw["workspace"],
            users=raw["users"],
            bills=raw["bills"]
        )


def calculate_balance(state):
    """Calculate total balance from all events

    """
    total = {
        bill_id: sum([
            v[u]["payment"] for u in state.users
        ]) for (bill_id, v) in state.bills.items()
    }
    return {
        u: sum([
            (
                v[u]["payment"] -
                v[u]["share"] * total[bill_id]
            ) for (bill_id, v) in state.bills.items()
        ]) for u in state.users
    }


def calculate_flow(state):
    """Calculate suggested money flow

    """
    return dict()


#
# Command line tools
#


def clear():
    os.system("clear")


def _getch():
    """Get character and auto enter

    """
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


def getch():
    """Get character, clear, and return

    """
    ch = _getch()
    clear()
    return ch


# TODO: Flashing message to project_prompt (e.g. unknown key)
# TODO: Project summary to project_prompt
# TODO: All prompt views to same height


def _quit():
    clear()
    print(
        """

        Thanks for using Concourse!

        """
    )
    quit()


# Each of the actions perform some side-effects
# and passthrough (possibly) altered state.


def export_results(state):
    return state


def print_results(state):
    return state


def unknown(state):
    """Handle unknown selection

    """
    return state


def save(state):
    state.save()
    print("Saved as " + state.filepath)
    return state


def new_project():
    # TODO: Render method that prettily prints refreshes
    print(
        """

        *** New project ***

        """
    )
    name = input("Project name> ")
    workspace = input("Working directory> ")
    num = int(input("Number of users> "))
    users = [input("User #{0}> ".format(i + 1)) for i in range(num)]
    clear()
    return State(
        name=name,
        workspace=workspace,
        users=users,
        bills={}
    )


def load():
    print(
        """

        *** Load a project ***

        """
    )
    filepath = input("Filepath> ")
    return State.load(filepath)


def add_bill(state):
    # TODO: Abort option
    # TODO: Dynamic rendering of information
    print(
        """

        *** Add bill ***

        """
    )
    bill_id = input("Identifier> ")
    equal = input("Equal shares (y/n)> ")
    payments = {
        u: {
            "payment": float(input("{0} paid> ".format(u))),
            "share": (
                1.0 / len(state.users) if equal == "y" else
                0.01 * float(input("{0}'s percentage> ".format(u)))
            )
        } for u in state.users
    }
    bills = update_dict(
        state.bills,
        {bill_id: payments}
    )
    clear()
    return State(
        name=state.name,
        workspace=state.workspace,
        users=state.users,
        bills=bills
    )


def display_balance(state):
    return state


def project_prompt(state):

    def do(ch, state):
        return project_prompt(
            add_bill(state)        if ch == "a" else
            display_balance(state) if ch == "b" else
            export_results(state)  if ch == "e" else
            print_results(state)   if ch == "p" else
            _quit()                if ch == "q" else
            save(state)            if ch == "s" else
            unknown(state)
        )

    print(
        """
        Your options consist of

        <a> Add bill
        <b> Display current balance
        <e> Export results
        <p> Print results
        <q> Quit
        <s> Save

        """
    )
    return do(getch(), state)


def main_prompt():

    def act(ch, state):
        return project_prompt(
            new_project()      if ch == "n" else
            load()        if ch == "l" else
            _quit()            if ch == "q" else
            unknown(state)
        )

    clear()
    print(
        """
           _______________________________________________________
          --------------------------------------------------------
         / Concourse -- A dead simple utility for sharing costs /
        --------------------------------------------------------

        Please select what to do:

        <n> Start a new project
        <l> Load an existing project
        <q> Quit

        """
    )
    return act(getch(), {})


if __name__ == "__main__":

    main_prompt()
